```markdown
# Vehicle Counting at Traffic Lights

Um pipeline leve em Python para processar v√≠deos de sem√°foro, detectar e rastrear ve√≠culos, contar quantos cruzam uma linha virtual e gerar relat√≥rios por v√≠deo.

---

## üîß Pr√©-requisitos

- Python 3.7+  
- Google Colab ou ambiente com CPU/GPU  
- V√≠deos de entrada na pasta do projeto

---

## üõ† Ferramentas

- **YOLOv5 (ultralytics)**: detec√ß√£o em tempo real de carros, motos, √¥nibus e caminh√µes  
- **OpenCV**: leitura de v√≠deos, extra√ß√£o de frames e processamento de ROI para sem√°foro  
- **CentroidTracker (custom)**: rastreamento frame-a-frame por dist√¢ncia de centroides, sem depend√™ncias externas complexas  
- **NumPy & SciPy**: c√°lculos num√©ricos e dist√¢ncias euclidianas  
- **pandas**: manipula√ß√£o e exporta√ß√£o de contagens em CSV  
- **ace_tools**: exibi√ß√£o interativa dos DataFrames no Colab

---

## ‚öô Estrutura resumida

1. **Instala√ß√£o**  
   ```bash
   pip install ultralytics opencv-python-headless pandas numpy scipy
   ```
2. **Configura√ß√£o**  
   - Importar libs, carregar YOLOv5 e listar v√≠deos  
3. **Detec√ß√£o de sem√°foro**  
   - ROI em HSV para diferenciar verde vs. vermelho  
4. **Rastreamento**  
   - `CentroidTracker.update()` associa caixas por dist√¢ncia, mant√©m IDs  
5. **Contagem**  
   - Incrementa quando o centroide cruza a linha e verifica cor do sem√°foro  
6. **Relat√≥rios**  
   - Gera `*_time_dist.csv` (contagem por segundo)  
   - Exibe DataFrame e imprime resumo (total, verde vs. vermelho)

---

## üöÄ Uso

1. Fa√ßa upload dos v√≠deos no Colab.  
2. Cole e execute as c√©lulas na ordem acima.  
3. Confira os CSVs e o resumo impresso para cada v√≠deo.

---

## üìë Licen√ßa

MIT License.  
```
